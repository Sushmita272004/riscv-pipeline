$date
	Tue Jul 15 15:26:01 2025
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module testbench $end
$scope module dut $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var wire 5 # rs2 [4:0] $end
$var wire 5 $ rs1 [4:0] $end
$var wire 32 % result [31:0] $end
$var wire 5 & rd [4:0] $end
$var wire 32 ' pc [31:0] $end
$var wire 7 ( opcode [6:0] $end
$var wire 32 ) instr [31:0] $end
$var wire 7 * funct7 [6:0] $end
$var wire 3 + funct3 [2:0] $end
$var wire 32 , b [31:0] $end
$var wire 3 - alu_ctrl [2:0] $end
$var wire 32 . a [31:0] $end
$upscope $end
$upscope $end
$scope module testbench $end
$scope module dut $end
$scope module IF $end
$var wire 1 ! clk $end
$var wire 1 " reset $end
$var reg 32 / instr [31:0] $end
$var reg 32 0 pc [31:0] $end
$var reg 32 1 pc_out [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module testbench $end
$scope module dut $end
$scope module ID $end
$var wire 5 2 rs2 [4:0] $end
$var wire 5 3 rs1 [4:0] $end
$var wire 5 4 rd [4:0] $end
$var wire 32 5 pc [31:0] $end
$var wire 7 6 opcode [6:0] $end
$var wire 32 7 instr [31:0] $end
$var wire 7 8 funct7 [6:0] $end
$var wire 3 9 funct3 [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module testbench $end
$scope module dut $end
$scope module EX $end
$var wire 32 : result [31:0] $end
$var wire 7 ; opcode [6:0] $end
$var wire 7 < funct7 [6:0] $end
$var wire 3 = funct3 [2:0] $end
$var wire 32 > b [31:0] $end
$var wire 32 ? a [31:0] $end
$var reg 3 @ alu_ctrl [2:0] $end
$upscope $end
$upscope $end
$upscope $end
$scope module testbench $end
$scope module dut $end
$scope module RF $end
$var wire 32 A a [31:0] $end
$var wire 32 B b [31:0] $end
$var wire 1 ! clk $end
$var wire 5 C rd [4:0] $end
$var wire 5 D rs1 [4:0] $end
$var wire 5 E rs2 [4:0] $end
$var wire 32 F wd [31:0] $end
$var wire 1 G we $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
$comment Show the parameter values. $end
$dumpall
$end
#0
$dumpvars
1G
b1111 F
b11 E
b10 D
b1 C
b101 B
b1010 A
b0 @
b1010 ?
b101 >
b0 =
b0 <
b110011 ;
b1111 :
b0 9
b0 8
b1100010000000010110011 7
b110011 6
b0 5
b1 4
b10 3
b11 2
b0 1
b0 0
b1100010000000010110011 /
b1010 .
b0 -
b101 ,
b0 +
b0 *
b1100010000000010110011 )
b110011 (
b0 '
b1 &
b1111 %
b10 $
b11 #
1"
0!
$end
#5
b1 -
b1 @
b1011 %
b1011 :
b1011 F
b100000 *
b100000 8
b100000 <
b100 ,
b100 >
b100 B
b101 #
b101 2
b101 E
b1111 .
b1111 ?
b1111 A
b1 $
b1 3
b1 D
b100 &
b100 4
b100 C
b100 '
b100 1
b100 5
b1000000010100001000001000110011 )
b1000000010100001000001000110011 /
b1000000010100001000001000110011 7
b100 0
1!
0"
#10
0!
#15
bx %
bx :
bx F
b0 -
b0 @
b0 *
b0 8
b0 <
bx ,
bx >
bx B
b0 #
b0 2
b0 E
b1000 .
b1000 ?
b1000 A
b111 $
b111 3
b111 D
b10 +
b10 9
b10 =
b110 &
b110 4
b110 C
b11 (
b11 6
b11 ;
b1000 '
b1000 1
b1000 5
b111010001100000011 )
b111010001100000011 /
b111010001100000011 7
b1000 0
1!
#20
0!
#25
bx *
bx 8
bx <
bx #
bx 2
bx E
bx .
bx ?
bx A
bx $
bx 3
bx D
bx +
bx 9
bx =
bx &
bx 4
bx C
bx (
bx 6
bx ;
b1100 '
b1100 1
b1100 5
bx )
bx /
bx 7
b1100 0
1!
#30
0!
#35
b10000 '
b10000 1
b10000 5
b10000 0
1!
#40
0!
#45
b10100 '
b10100 1
b10100 5
b10100 0
1!
#50
0!
#55
b11000 '
b11000 1
b11000 5
b11000 0
1!
#60
0!
#65
b11100 '
b11100 1
b11100 5
b11100 0
1!
#70
0!
#75
b100000 '
b100000 1
b100000 5
b100000 0
1!
#80
0!
#85
b100100 '
b100100 1
b100100 5
b100100 0
1!
#90
0!
#95
b101000 '
b101000 1
b101000 5
b101000 0
1!
#100
0!
#105
b101100 '
b101100 1
b101100 5
b101100 0
1!
#110
0!
#115
b110000 '
b110000 1
b110000 5
b110000 0
1!
#120
0!
#125
b110100 '
b110100 1
b110100 5
b110100 0
1!
#130
0!
#135
b111000 '
b111000 1
b111000 5
b111000 0
1!
#140
0!
#145
b111100 '
b111100 1
b111100 5
b111100 0
1!
#150
0!
#155
b1000000 '
b1000000 1
b1000000 5
b1000000 0
1!
#160
0!
#165
b1000100 '
b1000100 1
b1000100 5
b1000100 0
1!
#170
0!
#175
b1001000 '
b1001000 1
b1001000 5
b1001000 0
1!
#180
0!
#185
b1001100 '
b1001100 1
b1001100 5
b1001100 0
1!
#190
0!
#195
b1010000 '
b1010000 1
b1010000 5
b1010000 0
1!
#200
0!
#205
b1010100 '
b1010100 1
b1010100 5
b1010100 0
1!
